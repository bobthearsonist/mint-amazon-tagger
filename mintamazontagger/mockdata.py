from collections import OrderedDict

from mintamazontagger import amazon
from mintamazontagger import mint


def transaction(*args, **kwargs):
    return mint.Transaction(transaction_json(*args, **kwargs))


def order(*args, **kwargs):
    return amazon.Order(order_dict(*args, **kwargs))


def item(*args, **kwargs):
    return amazon.Item(item_dict(*args, **kwargs))


def refund(*args, **kwargs):
    return amazon.Refund(refund_dict(*args, **kwargs))


def transaction_json(
        amount='$11.95',
        category='Personal Care',
        date='2/28/14',
        description='Amazon',
        original_description='AMAZON MKTPLACE PMTS',
        id=975256256,
        pid=None,
        note='Great note here'):
    trans = {
        'account': 'Amazon Visa',
        'amount': amount,
        'category': category,
        'categoryId': 4,
        'date': date,
        'fi': 'Chase Credit Card',
        'hasAttachments': False,
        'id': id,
        'isAfterFiCreationTime': True,
        'isCheck': False,
        'isChild': False,
        'isDuplicate': False,
        'isEdited': True,
        'isFirstDate': True,
        'isLinkedToRule': False,
        'isMatched': False,
        'isPending': False,
        'isPercent': False,
        'isSpending': True,
        'isTransfer': False,
        'labels': [],
        'manualType': 0,
        'description': description,
        'note': note,
        'number_matched_by_rule': -1,
        'ruleCategory': '',
        'ruleCategoryId': 0,
        'ruledescription': '',
        'txnType': 0,
        'userCategoryId': 4,
    }
    if pid:
        trans['isChild'] = True
        trans['pid'] = pid
    return trans


def order_dict(
        subtotal='$10.90',
        shipping_charge='$0.00',
        tax_charged='$1.05',
        total_charged='$11.95',
        tax_before_promotions='$1.05',
        total_promotions='$0.00',
        tracking='AMZN(ABC123)',
        order_status='Shipped',
        order_id='123-3211232-7655671',
        order_date='02/26/14',
        shipment_date='02/28/14',
        payment_type='Great Credit Card'):
    return OrderedDict([
        ('Order Date', order_date),
        ('Order ID', order_id),
        ('Payment Instrument Type', payment_type),
        ('Website', 'Amazon.com'),
        ('Purchase Order Number', ''),
        ('Ordering Customer Email', 'yup@aol.com'),
        ('Shipment Date', shipment_date),
        ('Shipping Address Name', 'Some Great Buyer'),
        ('Shipping Address Street 1', 'The best city'),
        ('Shipping Address Street 2', 'But can be rainy, sometimes'),
        ('Shipping Address City', 'SEATTLE'),
        ('Shipping Address State', 'WA'),
        ('Shipping Address Zip', '98101-1001'),
        ('Order Status', order_status),
        ('Carrier Name & Tracking Number', tracking),
        ('Subtotal', subtotal),
        ('Shipping Charge', shipping_charge),
        ('Tax Before Promotions', tax_before_promotions),
        ('Total Promotions', total_promotions),
        ('Tax Charged', tax_charged),
        ('Total Charged', total_charged),
        ('Buyer Name', 'Some Great Buyer'),
        ('Group Name', 'Optional Group'),
    ])


def item_dict(
        title='Duracell AAs',
        item_subtotal='$10.90',
        item_subtotal_tax='$1.05',
        item_total='$11.95',
        purchase_price_per_unit='$5.45',
        tracking='AMZN(ABC123)',
        quantity=2,
        order_status='Shipped',
        order_id='123-3211232-7655671',
        order_date='02/26/14',
        shipment_date='02/28/14',
        payment_type='Great Credit Card'):
    return OrderedDict([
        ('Order Date', order_date),
        ('Order ID', order_id),
        ('Title', title),
        ('Category', 'Misc.'),
        ('ASIN/ISBN', 'B00009V2QX'),
        ('UNSPSC Code', '26111700'),
        ('Website', 'Amazon.com'),
        ('Release Date', '04/15/10'),
        ('Condition', 'new'),
        ('Seller', 'Todays Concept'),
        ('Seller Credentials', ''),
        ('List Price Per Unit', purchase_price_per_unit),
        ('Purchase Price Per Unit', purchase_price_per_unit),
        ('Quantity', str(quantity)),
        ('Payment Instrument Type', payment_type),
        ('Purchase Order Number', ''),
        ('PO Line Number', ''),
        ('Ordering Customer Email', 'yup@aol.com'),
        ('Shipment Date', shipment_date),
        ('Shipping Address Name', 'Some Great Buyer'),
        ('Shipping Address Street 1', 'The best city'),
        ('Shipping Address Street 2', 'But can be rainy, sometimes'),
        ('Shipping Address City', 'SEATTLE'),
        ('Shipping Address State', 'WA'),
        ('Shipping Address Zip', '98101-1001'),
        ('Order Status', order_status),
        ('Carrier Name & Tracking Number', tracking),
        ('Item Subtotal', item_subtotal),
        ('Item Subtotal Tax', item_subtotal_tax),
        ('Item Total', item_total),
        ('Tax Exemption Applied', ''),
        ('Tax Exemption Type', ''),
        ('Exemption Opt-Out', ''),
        ('Buyer Name', 'Some Great Buyer'),
        ('Currency', 'USD'),
        ('Group Name', 'Optional Group'),
    ])


def refund_dict(
        title='Duracell Procell AA 24 Pack PC1500BKD09',
        refund_amount='$10.90',
        refund_tax_amount='$1.05',
        tracking='AMZN(ABC123)',
        status='Shipped',
        quantity=2,
        order_id='123-3211232-7655671',
        order_date='02/26/14',
        refund_date='03/16/14'):
    return OrderedDict([
        ('Order Date', order_date),
        ('Order ID', order_id),
        ('Title', title),
        ('Category', 'Apparel'),
        ('ASIN/ISBN', 'B0174V9GZW'),
        ('Website', 'Amazon.com'),
        ('Purchase Order Number', ''),
        ('Refund Date', refund_date),
        ('Refund Condition', 'Completed'),
        ('Refund Amount', refund_amount),
        ('Refund Tax Amount', refund_tax_amount),
        ('Tax Exemption Applied', ''),
        ('Refund Reason', 'Customer Return'),
        ('Quantity', quantity),
        ('Seller', 'Customonaco'),
        ('Seller Credentials', ''),
        ('Buyer Name', 'Some Great Buyer'),
        ('Group Name', 'Optional Group'),
    ])


# Pulled early 2018. No longer representative of real cateogories, which have a
# user id prefixed. e.g. 'Advertising' would be: 321321321_1701.
MINT_CATEGORIES_TO_IDS = {
    'ATM Fee': 1605,
    'Advertising': 1701,
    'Air Travel': 1501,
    'Alcohol & Bars': 708,
    'Allowance': 610,
    'Amusement': 102,
    'Arts': 101,
    'Auto & Transport': 14,
    'Auto Insurance': 1405,
    'Auto Payment': 1404,
    'Baby Supplies': 611,
    'Babysitter & Daycare': 602,
    'Bank Fee': 1606,
    'Bills & Utilities': 13,
    'Bonus': 3004,
    'Books': 202,
    'Books & Supplies': 1003,
    'Business Services': 17,
    'Buy': 5004,
    'Cash & ATM': 2001,
    'Charity': 802,
    'Check': 2002,
    'Child Support': 603,
    'Clothing': 201,
    'Coffee Shops': 704,
    'Credit Card Payment': 2101,
    'Dentist': 501,
    'Deposit': 5001,
    'Dividend & Cap Gains': 5003,
    'Doctor': 502,
    'Education': 10,
    'Electronics & Software': 204,
    'Entertainment': 1,
    'Eyecare': 503,
    'Fast Food': 706,
    'Federal Tax': 1901,
    'Fees & Charges': 16,
    'Finance Charge': 1604,
    'Financial': 11,
    'Financial Advisor': 1105,
    'Food & Dining': 7,
    'Furnishings': 1201,
    'Gas & Fuel': 1401,
    'Gift': 801,
    'Gifts & Donations': 8,
    'Groceries': 701,
    'Gym': 507,
    'Hair': 403,
    'Health & Fitness': 5,
    'Health Insurance': 506,
    'Hide from Budgets & Trends': 40,
    'Hobbies': 206,
    'Home': 12,
    'Home Improvement': 1203,
    'Home Insurance': 1206,
    'Home Phone': 1302,
    'Home Services': 1204,
    'Home Supplies': 1208,
    'Hotel': 1502,
    'Income': 30,
    'Interest Income': 3005,
    'Internet': 1303,
    'Investments': 50,
    'Kids': 6,
    'Kids Activities': 609,
    'Kitchen': 1562103,
    'Late Fee': 1602,
    'Laundry': 406,
    'Lawn & Garden': 1202,
    'Legal': 1705,
    'Life Insurance': 1102,
    'Loan Fees and Charges': 6005,
    'Loan Insurance': 6002,
    'Loan Interest': 6004,
    'Loan Payment': 6001,
    'Loan Principal': 6003,
    'Loans': 60,
    'Local Tax': 1903,
    'Misc Expenses': 70,
    'Mobile Phone': 1304,
    'Mortgage & Rent': 1207,
    'Movies & DVDs': 104,
    'Music': 103,
    'Newspapers & Magazines': 105,
    'Office Supplies': 1702,
    'Orthodontics': 1671958,
    'Parking': 1402,
    'Paycheck': 3001,
    'Personal Care': 4,
    'Pet Food & Supplies': 901,
    'Pet Grooming': 902,
    'Pets': 9,
    'Pharmacy': 505,
    'Printing': 1703,
    'Property Tax': 1905,
    'Public Transportation': 1406,
    'Rail': 1562093,
    'Reimbursement': 3006,
    'Rental Car & Taxi': 1503,
    'Rental Income': 3007,
    'Restaurants': 707,
    'Returned Purchase': 3003,
    'Sales Tax': 1904,
    'Sell': 5005,
    'Service & Parts': 1403,
    'Service Fee': 1601,
    'Shipping': 1704,
    'Shopping': 2,
    'Spa & Massage': 404,
    'Sporting Goods': 207,
    'Sports': 508,
    'State Tax': 1902,
    'Student Loan': 1002,
    'Taxes': 19,
    'Television': 1301,
    'Toys': 606,
    'Trade Commissions': 1607,
    'Transfer': 21,
    'Transfer for Cash Spending': 2102,
    'Travel': 15,
    'Tuition': 1001,
    'Uncategorized': 20,
    'Utilities': 1306,
    'Vacation': 1504,
    'Veterinary': 903,
    'Withdrawal': 5002,
}
